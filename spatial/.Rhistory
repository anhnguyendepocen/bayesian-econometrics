all_varying <- rstanarm:::b_names(rownames(fit$stan_summary), value = TRUE)
expect_identical(grep_for_pars(fit, "period"), all_period)
expect_identical(grep_for_pars(fit, c("period", "size")), c(all_period, "size"))
expect_identical(grep_for_pars(fit, "period|size"), c("size", all_period))
expect_identical(grep_for_pars(fit, "(2|3)$"), all_period[1:2])
expect_identical(grep_for_pars(fit, "herd"), all_varying)
expect_identical(grep_for_pars(fit, "b\\["), all_varying)
expect_identical(grep_for_pars(fit, "Intercept"),
c("(Intercept)", all_varying, "Sigma[(Intercept),(Intercept)]"))
expect_identical(grep_for_pars(fit, "herd:[3,5]"), all_varying[c(3,5)])
expect_identical(grep_for_pars(fit, "herd:[3-5]"), all_varying[3:5])
expect_error(grep_for_pars(fit, "NOT A PARAMETER"), regexp = "No matches")
expect_error(grep_for_pars(fit, "b["))
expect_identical(collect_pars(fit, regex_pars = "period"), all_period)
expect_identical(collect_pars(fit, pars = "size", regex_pars = "period"),
c("size", all_period))
expect_identical(collect_pars(fit, pars = c("(Intercept)", "size")),
c("(Intercept)", "size"))
expect_identical(collect_pars(fit, pars = "period2", regex_pars = "herd:[[1]]"),
c("period2", all_varying[1]))
expect_identical(collect_pars(fit, pars = "size", regex_pars = "size"), "size")
expect_identical(collect_pars(fit, regex_pars = c("period", "herd")),
c(all_period, all_varying))
})
test_that("posterior_sample_size works", {
pss <- rstanarm:::posterior_sample_size
expect_equal(pss(example_model), 500)
expect_equal(pss(fit), nrow(as.matrix(fit)))
expect_equal(pss(fit2), ITER * CHAINS / 2)
expect_equal(pss(fitvb), 1000)
expect_equal(pss(fitvb2), 1000)
expect_null(pss(fito))
fit3 <- suppressWarnings(stan_glm(mpg ~ wt, data = mtcars, iter = 20,
chains = 1, thin = 2))
expect_equal(pss(fit3), nrow(as.matrix(fit3)))
})
test_that("last_dimnames works", {
a <- array(rnorm(300), dim = c(10, 3, 10),
dimnames = list(A = NULL, B = NULL, C = letters[1:10]))
expect_identical(last_dimnames(a), letters[1:10])
m <- a[1,,, drop=TRUE]
expect_identical(last_dimnames(m), letters[1:10])
expect_identical(last_dimnames(m), colnames(m))
d <- as.data.frame(m)
expect_identical(last_dimnames(d), last_dimnames(m))
expect_null(last_dimnames(m[1,]))
})
x <- rbeta(10000, 1, 2)
sqrt(10000)
z <- 100*(x - mean(x))
hist(x, col = "darkgrey", border = FALSE)
hist(z, col = "darkgrey", border = FALSE)
pnorm(1.118)
pnorm(2.5)
X <- rnrorm(100, 1, 1)
X <- rnorm(100, 1, 1)
mean(X)
median(X)
median(X)
?sample
X <- rnorm(100, 1, 1)
median(X)
Tboot <- NULL
for (i in 1:100) {
X_sub <- sample(X, 100, replace = TRUE)
Tboot[i] <- median(X_sub)
}
mean(Tboot - mean(Tboot))
variance(Tboot)
var(Tboot)
sqrt(var(Tboot))
median(X)
Tboot <- NULL
for (i in 1:1000) {
X_sub <- sample(X, 100, replace = TRUE)
Tboot[i] <- median(X_sub)
}
sqrt(var(Tboot))
mean(Tboot)
median(Tboot)
X <- rnorm(100, 5, 2)
mean(X)
var(X)
X <- rnorm(100, 5, 2)
mean(X)
var(X)
Tboot <- NULL
for (i in 1:1000) {
X_sub <- sample(X, 100, replace = TRUE)
Tboot[i] <- mean(X_sub)
}
sqrt(var(Tboot))
var(Tboot)
2/100
sqrt(2/100)
sqrt(var(Tboot))
Tboot <- NULL
for (i in 1:10000) {
X_sub <- sample(X, 100, replace = TRUE)
Tboot[i] <- mean(X_sub)
}
sqrt(var(Tboot))
sqrt(2/100)
2/100
var(Tbot)
var(Tboot)
X_sub <-
sample(X, 100, replace = TRUE)
sample(X, 100, replace = TRUE)
sample(X, 100, replace = TRUE)
X <- rnorm(100, 5, 2)
mean(X)
var(X)
Tboot <- NULL
for (i in 1:10000) {
X_sub <- sample(X, 100, replace = TRUE)
Tboot[i] <- mean(X_sub)
}
sqrt(var(Tboot))
sqrt(2/100)
sqrt(2^2/100)
?rnorm
X <- rnorm(100, 5, 2)
mean(X)
var(X)
Tboot <- NULL
for (i in 1:10000) {
X_sub <- sample(X, 100, replace = TRUE)
Tboot[i] <- mean(X_sub)
}
sqrt(var(Tboot))
sqrt(2^2/100)
X <- rnorm(100, 5, 2)
mean(X)
var(X)
Tboot <- NULL
for (i in 1:10000) {
X_sub <- sample(X, 100, replace = TRUE)
Tboot[i] <- mean(X_sub)
}
sqrt(var(Tboot))
sqrt(2^2/100)
sqrt(mean(Tboot - mean(Tboot)))
mean(Tboot - mean(Tboot))
sqrt(mean((Tboot - mean(Tboot))^2))
sqrt(var(Tboot))
remove(list = ls())
x1 <- rnorm(1000, 2, 4)
x2 <- rnorm(1000, 0, 1)
y <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, 3)
fit_hom <- lm(y ~ x1 + x2)
rpois(1, 2)
rpois(1, 2)
rpois(1, 2)
rpois(1, 2)
rpois(1, 2)
rpois(1, 2)
rpois(1, 2)
rpois(1, 2)
rpois(1, 2)
rpois(1, 2)
rf(1, 1, 1)
rf(1, 1, 1)
rf(1, 1, 1)
rf(1, 1, 1)
rf(1, 1, 1)
rf(1, 1, 1)
rf(1, 1, 1)
rf(1, 1, 1)
rf(1, 1, 1)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, rf(1, 1, 1))
fit_het <- lm(z ~ x1 + x2)
summary(fit_hom)
summar(fit_het)
summary(fit_het)
plot(fit_het$residuals)
plot(fit_hom$residuals)
plot(fit_het$residuals)
rf(1, 1, 1)
rf(10, 1, 1)
rf(10, 1, 1)
rf(10, 1, 1)
runif(0,10)
runif(1,0,10)
runif(1,0,10)
runif(1,0,10)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, runif(1,0,10))
fit_het <- lm(z ~ x1 + x2)
plot(fit_hom$residuals)
plot(fit_het$residuals)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, runif(1,0,100))
fit_het <- lm(z ~ x1 + x2)
plot(fit_hom$residuals)
plot(fit_het$residuals)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, runif(1000,0,100))
fit_het <- lm(z ~ x1 + x2)
plot(fit_het$residuals)
plot(fit_hom$residuals)
plot(fit_het$residuals)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, runif(1000,10,100))
plot(fit_hom$residuals)
plot(fit_het$residuals)
fit_hom <- lm(y ~ x1 + x2)
fit_het <- lm(z ~ x1 + x2)
plot(fit_hom$residuals)
plot(fit_het$residuals)
summary(fit_hom)
summary(fit_het)
w <- rep(NA, 1000)
1000-751
w <- rep(NA, 1000)
w[1:250] <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, 3)
w[251:500] <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, 5)
w[501:750] <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, 10)
w[751:1000] <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, 1)
w[1:250] <- 2 + 0.5*x1 - 1.5*x2 + rnorm(250, 0, 3)
w <- rep(NA, 1000)
w[1:250] <- 2 + 0.5*x1[1:250] - 1.5*x2[1:250] + rnorm(250, 0, 3)
w[251:500] <- 2 + 0.5*x1[251:500] - 1.5*x2[251:500] + rnorm(250, 0, 5)
w[501:750] <- 2 + 0.5*x1[501:750] - 1.5*x2[501:750] + rnorm(250, 0, 10)
w[751:1000] <- 2 + 0.5*x1[751:1000] - 1.5*x2[751:1000] + rnorm(250, 0, 1)
fit_clu <- lm(w ~ x1 + x2)
plot(fit_clu$residuals)
qqnorm(fit_clu)
qqnorm(fit_clu$residuals)
qqnorm(fit_clu$hom)
qqnorm(fit_hom$residuals)
qqnorm(fit_het$residuals)
rnorm(1, 0, runif(1000,10,100))
runif(1000,10,100)
rpois(10)
rpois(10,10)
rpois(100,10)
hist(rnorm(1, 0, runif(1000,10,100)))
hist(rnorm(1, 0, runif(1000,10,100)))
rnorm(1, 0, runif(1000,10,100))
hist(rnorm(1000, 0, runif(1000,10,100)))
hist(rnorm(1000, 0, runif(1000,10,100)))
hist(rnorm(1000, 0, runif(1000,10,100)))
hist(rnorm(1000,0,1))
hist(rnorm(1000,0,1))
hist(rnorm(1000, 0, runif(1000,10,100)))
hist(rnorm(1000, 0, rpois(1000,10)))
hist(rnorm(1000, 0, runif(1000,10,100)))
hist(z)
hist(w)
hist(y)
hist(z)
rep(3,250)
w <- 2 + 0.5*x1 - 1.5*x2 + rnorm(250, 0, c(rep(3,250),rep(1,250),rep(10,250),rep(2,250)))
fit_clu <- lm(w ~ x1 + x2)
plot(fit_clu$residuals)
plot(fit_clu$residuals)
plot(fit_het$residuals)
z <- 2 + 0.5*x1 - 1.5*x2 + rep(rnorm(1, 0, runif(1, 10, 100)), 1000)
fit_het <- lm(z ~ x1 + x2)
plot(fit_het$residuals)
qqnorm(fit_het$residuals)
w <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, c(rep(3,250),rep(1,250),rep(10,250),rep(2,250)))
fit_clu <- lm(w ~ x1 + x2)
plot(fit_clu$residuals)
sd_het <- runif(1000, 10, 100)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, sd_het)
fit_het <- lm(z ~ x1 + x2)
plot(fit_het$residuals)
qqnorm(fit_het$residuals)
sd_het
sd_het <- runif(1000, 10, 100)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, sd_het)
fit_het <- lm(z ~ x1 + x2)
plot(fit_het$residuals)
plot(fit_hom$residuals)
plot(fit_het$residuals)
plot(fit_hom$residuals)
plot(fit_het$residuals)
plot(fit_hom$residuals)
plot(fit_het$residuals)
plot(fit_clu$residuals)
plot(fit_het$residuals)
qqplot(fit_het$residuals)
qqnorm(fit_het$residuals)
qqnorm(fit_hom$residuals)
qqnorm(fit_clu$residuals)
sd_het <- runif(1000, 1, 100)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, sd_het)
fit_het <- lm(z ~ x1 + x2)
plot(fit_het$residuals)
qqnorm(fit_het$residuals)
qqnorm(fit_hom$residuals)
qqnorm(fit_het$residuals)
rpois(10,200)
rpois(10,10)
rpois(10,10)
mean(rpois(10,10))
sd_het <- rpois(1000,10)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, sd_het)
fit_het <- lm(z ~ x1 + x2)
plot(fit_het$residuals)
qqnorm(fit_het$residuals)
rcauchy(1000,100)
rcauchy(1000,1)
rf(100, 1,1)
rf(100, 1,10)
rf(100, 10,10)
runiff(100, 10,100)
runif(100, 10,100)
runif(1000, 1,1000)
mean(runif(1000, 1,1000))
sd_het <- runif(1000, 1,1000)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, sd_het)
sd_het <- runif(1000, 1,1000)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, sd_het)
fit_het <- lm(z ~ x1 + x2)
plot(fit_het$residuals)
qqnorm(fit_hom$residuals)
qqnorm(fit_het$residuals)
qqnorm(fit_clu$residuals)
x1 <- rnorm(1000, 2, 4)
x2 <- rnorm(1000, 0, 1)
y <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, 3)
sd_het <- runif(1000, 1,1000)
z <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, sd_het)
w <- rep(NA, 1000)
w <- 2 + 0.5*x1 - 1.5*x2 + rnorm(1000, 0, c(rep(3,250),rep(1,250),rep(10,250),rep(2,250)))
dat <- list(y = y, X = cbind(rep(1,500), x1, x2))
ncol(dat$X)
dat$K <- ncol(dat$X)
dat$N <- nrow(dat$X)
getwd()
library(bayesplot)
?bayesplot_grid
x1 <- rnorm(100, 0, 1)
x1 <- rnorm(100, 10, 5)
y <- 2 + x1 + rnrom(100, 0, 2)
y <- 2 + x1 + rnorm(100, 0, 2)
summary(lm(y ~ x1))
summary(lm(y ~ x1 + x1*x1))
summary(lm(y ~ x1 + x1:x1))
summary(lm(y ~ x1 + I(x1:x1)))
summary(lm(y ~ x1 + I(x1*x1)))
0.005416/0.005218
qt(1.038,98)
pt(1.038,98)
pt(1.038,98)
pt(-1.038,98)
pt(-1.038,98)*2
matrix(1:4, ncol = 2)
matrix(1:4, ncol = 2, by.row = TRUE)
matrix(1:4, ncol = 2, byrow = TRUE)
matrix(1:4, ncol = 2, byrow = TRUE) %*% matrix(1:4, ncol = 2, byrow = TRUE)
matrix(1:4, ncol = 2, byrow = TRUE) %*% t(matrix(1:4, ncol = 2, byrow = TRUE))
matrix(1:6, ncol = 2, byrow = TRUE) %*% t(matrix(1:6, ncol = 2, byrow = TRUE))
matrix(1:12, ncol = 2, byrow = TRUE) %*% t(matrix(1:12, ncol = 2, byrow = TRUE))
summary(lm(y ~ x1))
fit <- lm(y ~ x1)
confint(fit, level = 0.95)
fit <- lm(y ~ x1 + I(x1*x1))
confint(fit, level = 0.95)
confint(fit, level = 0.99)
confint(fit, level = 1)
confint(fit, level = 0.99)
library(mvtnorm)
?rmvnorm()
rmvnorm(10, rep(0,10))
dim(rmvnorm(10, rep(0,10)))
dim(rmvnorm(10, rep(0,1))
)
dim(rmvnorm(10, rep(0,2))
)
dim(rmvnorm(10, rep(0,2)))
rmvnorm(10, rep(0,2))
rmvnorm(1, rep(0,2))
rmvnorm(1, rep(0,10))
rmvnorm(1, rep(0,10), diag(10))
mean(rmvnorm(1, rep(0,10), diag(10)))
mean(rmvnorm(1, rep(0,100), diag(100)))
var(rmvnorm(1, rep(0,100), diag(100)))
var(rmvnorm(1, rep(0,100), diag(100)))
n <- rmvnorm(1, rep(0,10), diag(10))
typeof(n)
class(n)
var(n)
var(c(n))
n <- rmvnorm(1, rep(0,100), diag(100))
var(c(n))
mvtnorm::rmvnorm(1, mean(0,500), diag(500))
mvtnorm::rmvnorm(1, rep(0,500), diag(500))
dim(mvtnorm::rmvnorm(1, rep(0,500), diag(500)))
dim(mvtnorm::rmvnorm(500, rep(0,1), diag(500)))
dim(mvtnorm::rmvnorm(1, rep(0,500), diag(500)))
pt(0.05/2,3)
pt(1-0.05/2,3)
qt(1-0.05/2,3)
pt(1000,3)
pt(.1000,3)
pt(.0001000,3)
pt(.0000001000,3)
pt(4.36,3)
1-pt(4.36,3)
2*(1-pt(4.36,3))
qf(1-0.05, 2,27)
fit
summary(fit)
fit <- lm(y ~ x1)
summary(fit)
cor(y, x1)
cor(y, x1)^2
predict(fit)
sum(predict(fit))
sum(predict(fit))-sum(y)
sum(predict(fit)-y)
1-pf(130.58,1,3)
1-pf(130.58,1,5)
round(1-pf(130.58,1,5),4)
remove(list = ls())
z <- rnorm(0,1)
z <- rnorm(1000,0,1)
Sigma <- matrix(c(1,0,0,1), byrow = TRUE)
Sigma
Sigma <- matrix(c(1,0,0,1), ncol = 2, byrow = TRUE)
Sigma
mu <- c(2,5)
24*24 %% 24
24*1 %% 24
24*0.1 %% 24
24*2 %% 24
24*0 %% 24
24*0.1
(24*0.1) %% 24
(24*seq(0,10, by = 1/24)) %% 24
seq(0,10, by = 1/24)
(24*seq(0,10, by = 1/24))
(24*seq(0,10, by = 1/24))
seq(0,10, by = 1/24)
cbind((24*seq(0,10, by = 1/24)) %% 24, (24*seq(0,10, by = 1/24)))
remove(list = ls())
yini <- c(y1 = 0.994, y2 = 0, dy1 = 0, dy2 = -2.00158510637908252240537862224)
times <- seq(0, 18, by = 0.01)
mu1 <- 0.012277471; mu2 <- 1 - mu1
arenstorf <- function(t, y, parms) {
with(as.list(y), {
D1 <- ((y1 + mu1)^2 + y2^2)^(3/2)
D2 <- ((y1 - mu2)^2 + y2^2)^(3/2)
# dy1 <- dy1
# dy2 <- dy2
d2y1 <- y1 + 2*dy2 - mu2 * ((y1 + mu1)/D1) - mu1 * ((y1 - mu2)/ D2)
d2y2 <- y2 - 2*dy1 - mu2 * (y2/D1) - mu1 * (y2/D2)
list(c(dy1, dy2, d2y1, d2y2))
})
}
out <- ode(func = arenstorf, y = yini, times = times, parms = NULL, method = "ode45")
library(deSolve)
out <- ode(func = arenstorf, y = yini, times = times, parms = NULL, method = "ode45")
yini <- c(y1 = 0.994, y2 = 0, dy1 = 0, dy2 = -2.0317326295573368357302057924)
out2 <- ode(func = arenstorf, y = yini, times = times, parms = NULL, method = "ode45")
yini <- c(y1 = 1.2, y2 = 0, dy1 = 0, dy2 = -1.049357510)
out3 <- ode(func = arenstorf, y = yini, times = times, parms = NULL, method = "ode45")
plot(out)
dev.off()
plot(out[,c("y1", "y2")], xlab = "y1", ylab = "y2", type = "l", lwd = 2, xlim = c(-1.2, 1.2),
main = "Arenstorf Problem (with various initial conditions)", col = "darkgrey")
lines(out2[,c("y1", "y2")], lwd = 2, col = "red")
lines(out3[,c("y1", "y2")], lwd = 2, col = "blue")
setwd("~/Desktop/git/bayesian-econometrics/spatial")
library(rstan)
library(spdep)
library(maptools)
library(bayesplot)
chi.poly <- readShapePoly("foreclosures.shp")
chi.poly <- chi.poly[1:10,]                                 # use a smaller data set
chidata <- chi.poly@data                                     # extract data from the spatial polygon
list.queen<-poly2nb(chi.poly, queen=TRUE)                    # if queen = TRUE not specified then rook method used for neighbors
W_list <- nb2listw(list.queen, style="W", zero.policy=TRUE)  # style='W' -> row standardized
W <- listw2mat(W_list)                                       # creates the weight matrix used in stan
plot(readShapePoly("foreclosures.shp"))
plot(W_list, coordinates(chi.poly), points = FALSE, add = TRUE, col = "darkgrey")
X <- cbind(rep(1,nrow(chidata)), log(chidata$est_fcs_rt), log(chidata$totpop))
y <- log(chidata$violent)
N <- nrow(X)
K <- ncol(X)
dat <- list("N" = N, "K" = K, "X" = X, "y" = y, "W" = W)
sar <- stan_model("sar.stan")
start <- proc.time()
fit_sar <- sampling(sar, data = dat, chains = 4, iter = 2000, cores = 4)
end <- proc.time()
end["elapsed"] - start["elapsed"]
print(fit_sar, digits = 2, pars = c("lambda", "beta", "sigma"))
sar.chi<-lagsarlm(I(log(violent))~I(log(est_fcs_rt))+I(log(totpop)), data=chi.poly@data, W_list)
coef(sar.chi)
?rbeta
dbeta(seq(0,1,by=0.01), 1, 1)
plot(dbeta(seq(0,1,by=0.01), 1, 1))
plot(dbeta(seq(0,1,by=0.01), 1, 1), type = "l")
plot(dbeta(seq(0,1,by=0.01), 1, 2), type = "l")
plot(dbeta(seq(0,1,by=0.01), 2, 2), type = "l")
plot(dbeta(seq(0,1,by=0.01), 1, 2), type = "l")
chi.poly <- readShapePoly("foreclosures.shp")
chi.poly <- chi.poly[1:100,]                                 # use a smaller data set
chidata <- chi.poly@data                                     # extract data from the spatial polygon
list.queen<-poly2nb(chi.poly, queen=TRUE)                    # if queen = TRUE not specified then rook method used for neighbors
W_list <- nb2listw(list.queen, style="W", zero.policy=TRUE)  # style='W' -> row standardized
W <- listw2mat(W_list)                                       # creates the weight matrix used in stan
plot(readShapePoly("foreclosures.shp"))
plot(W_list, coordinates(chi.poly), points = FALSE, add = TRUE, col = "darkgrey")
X <- cbind(rep(1,nrow(chidata)), log(chidata$est_fcs_rt), log(chidata$totpop))
y <- log(chidata$violent)
N <- nrow(X)
K <- ncol(X)
dat <- list("N" = N, "K" = K, "X" = X, "y" = y, "W" = W)
remove(fit_sar)
start <- proc.time()
fit_sar <- sampling(sar, data = dat, chains = 4, iter = 500, cores = 4)
